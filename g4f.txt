import g4f

response = g4f.ChatCompletion.create(
    model="gpt-3.5-turbo",
    messages=[{"role": "user", "content": "текст запроса"}],
    stream=True,
)
for message in response:
    print(message, flush=True, end='')


%matplotlib inline
## для полноценной работы со строками мы уберем ограничение строк и столбцов в отображении
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)

from sklearn.model_selection import train_test_split

# предположим, что df - это ваш DataFrame
X = data.drop('risk_level', axis=1)
y = data['risk_level']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

%%time

import seaborn as sns
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report

# Создаем экземпляры моделей с балансировкой классов 
lr = LogisticRegression(class_weight='balanced' , max_iter=1000)
rf = RandomForestClassifier(class_weight='balanced')
svc = SVC(class_weight='balanced')


# Список моделей
models = [lr, rf, svc]

for model in models:
    # Обучаем модель
    model.fit(X_train, y_train)

    # Предсказываем на тестовой выборке
    y_pred = model.predict(X_test)

    # Отчет классификации
print(classification_report(y_test, y_pred))


from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# Список моделей
model_names = ['Logistic Regression', 'Random Forest', 'SVC', 'Gradient Boosting', 'KNN']
models = [lr, rf, svc, gb, knn]

# Датафрейм для хранения метрик
metrics = pd.DataFrame(columns=['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])

for name, model in zip(model_names, models):
    y_pred = model.predict(X_test)
    
    # Вычисляем метрики и добавляем их в датафрейм
    new_row = pd.DataFrame({
        'Model': [name],
        'Accuracy': [accuracy_score(y_test, y_pred)],
        'Precision': [precision_score(y_test, y_pred, average='weighted', zero_division=0)],
        'Recall': [recall_score(y_test, y_pred, average='weighted')],
        'F1 Score': [f1_score(y_test, y_pred, average='weighted')]
    })
    metrics = pd.concat([metrics, new_row], ignore_index=True)

# Выводим метрики
print(metrics)